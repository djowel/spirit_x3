cmake_minimum_required(VERSION 2.8.12)
if("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_BINARY_DIR}")
    message(FATAL_ERROR "Do not build in-source. Please remove CMakeCache.txt and the CMakeFiles/ directory. Then build out-of-source.")
endif()
if(POLICY CMP0042)
    cmake_policy(SET CMP0042 NEW)
endif()
if(POLICY CMP0051)
    cmake_policy(SET CMP0051 NEW)
endif()
if(POLICY CMP0058)
    cmake_policy(SET CMP0058 NEW)
endif()
enable_language(CXX)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -ftemplate-depth=1024")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Ofast")

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")
    message("-- Using AppleClang compiler flags")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++1y -Wfatal-errors -fdiagnostics-color=always")
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    message("-- Using Clang compiler flags")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++1y -Wfatal-errors -march=native -ftemplate-backtrace-limit=0 -fdiagnostics-color=always")
    if(${CMAKE_CXX_COMPILER} MATCHES "templight")
        message("-- Using templight compiler flags")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Xtemplight -profiler -Xtemplight -ignore-system")
    endif()
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    message("-- Using GNU compiler flags")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpermissive -std=c++14 -fdiagnostics-color=always")
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
    message("-- Using Intel compiler flags")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -wd173 -wd3373 -wd780 -wd885 -wd673 -wd672 -wd437 -wd3092 -std=c++14")
endif()

include_directories(${CMAKE_CURRENT_SOURCE_DIR})

set(CATCH_FILES test.cc char.cc)
add_executable(catch ${CATCH_FILES})
